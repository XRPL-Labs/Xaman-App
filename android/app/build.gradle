apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: "com.google.firebase.crashlytics"
// apply plugin: 'com.google.android.gms.strict-version-matcher-plugin

import com.android.build.OutputFile

def canonicalVersionName = "4.2.1"
def canonicalVersionCode = 123

// NOTE: DO NOT change postFixSize value, this is for handling legacy method for handling the versioning in android
def postFixSize = 30_000

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node_modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def getPassword(String keyChain) {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    exec {
        commandLine 'security', '-q', 'find-generic-password', '-a', System.getenv("USER"), '-s', keyChain, '-w'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }
    //noinspection GroovyAssignabilityCheck
    stdout.toString().trim()
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    namespace "com.xrpllabs.xumm"
    defaultConfig {
        applicationId "com.xrpllabs.xumm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        missingDimensionStrategy 'react-native-camera', 'mlkit'
        versionCode canonicalVersionCode + postFixSize
        versionName canonicalVersionName
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include(*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('XAMAN_RELEASE_STORE_FILE')) {
                storeFile file(XAMAN_RELEASE_STORE_FILE)
                storePassword getPassword('XAMAN_RELEASE_STORE_PASSWORD')
                keyAlias XAMAN_RELEASE_KEY_ALIAS
                keyPassword getPassword('XAMAN_RELEASE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [excludeSystemAlertWindowPermission: "false"]
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            manifestPlaceholders = [excludeSystemAlertWindowPermission: "true"]
            /* Add the firebaseCrashlytics extension (by default,
            * it's disabled to improve build speeds) and set
            * nativeSymbolUploadEnabled to true along with a pointer to native libs. */
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
        }
    }

    // building in CI, change the singing config for release to debug
    if (System.getenv("CI")) {
        println '!!!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!!!'
        println '!!! Replacing the release config with debug as build is running inside CI !!!'
        println '!!!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!!!'
        buildTypes.release.signingConfig = signingConfigs.debug
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = false
        }
    }
}

dependencies {
    // Use local React Native AAR files instead of the prebuilt ones
    debugImplementation files('libs/ReactAndroid-debug.aar')
    releaseImplementation files('libs/ReactAndroid-release.aar')
    
    // React Native Core Dependencies (that your AAR might be missing)
    implementation 'com.facebook.fbjni:fbjni:0.5.1'
    implementation 'com.facebook.soloader:soloader:0.10.5'
    implementation 'com.facebook.yoga:proguard-annotations:1.19.0'
    
    // Complete OkHttp3 dependency set
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.squareup.okio:okio:3.6.0'
    implementation 'com.squareup.okhttp3:okhttp-tls:4.12.0'
    
    // Fresco dependencies
    implementation 'com.facebook.fresco:fresco:3.1.3'
    implementation 'com.facebook.fresco:drawee:3.1.3'
    implementation 'com.facebook.fresco:imagepipeline:3.1.3'
    implementation 'com.facebook.fresco:fbcore:3.1.3'
    implementation('com.facebook.fresco:animated-gif:3.1.3') {
        exclude group: 'com.facebook.react', module: 'react-android'
    }
    
    // Additional Fresco backends that might be needed
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:3.1.3'
    implementation 'com.facebook.fresco:memory-type-ashmem:3.1.3'
    implementation 'com.facebook.fresco:memory-type-native:3.1.3'
    implementation 'com.facebook.fresco:memory-type-java:3.1.3'
    
    // Jackson JSON processing (React Native uses this heavily)
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    
    // JSR-305 annotations for @Nullable, @Nonnull, etc.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    
    // Facebook Infer annotations 
    implementation 'com.facebook.infer.annotation:infer-annotation:0.18.0'
    
    // AndroidX annotations
    implementation 'androidx.annotation:annotation:1.7.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core:1.12.0'
    implementation 'androidx.fragment:fragment:1.6.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    
    // Hermes/JSC (uncomment the one you're using)
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    // Additional React Native related dependencies
    implementation 'javax.inject:javax.inject:1'
    
    // For React Native's AsyncStorage (if you use it)
    implementation 'androidx.sqlite:sqlite:2.4.0'
    
    // For React Native's networking capabilities
    implementation 'androidx.webkit:webkit:1.11.0'
    
    // Your existing app-specific dependencies
    implementation 'com.google.firebase:firebase-messaging:+'
    implementation 'com.google.firebase:firebase-common-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation "androidx.biometric:biometric:1.1.0"
    implementation 'com.github.kenglxn.QRGen:android:2.6.0'
    implementation 'com.github.Dimezis:BlurView:version-2.0.6'
    implementation 'com.android.billingclient:billing:7.0.0'
    implementation 'com.google.android.gms:play-services-wallet:19.4.0'
    implementation 'com.google.android.play:app-update:2.1.0'
    implementation 'com.google.android.gms:play-services-base:18.4.0'
    implementation 'com.google.android.material:material:1.12.0'
    
    // ML Kit dependencies for react-native-camera
    // Object detection feature with bundled default classifier
    // implementation 'com.google.mlkit:barcode-scanning:17.3.0'
    // implementation 'com.google.mlkit:object-detection:17.0.2'

    // Object detection feature with custom classifier support
    // implementation 'com.google.mlkit:object-detection-custom:17.0.2'

    // Face features
    // implementation 'com.google.mlkit:face-detection:16.1.7'

    implementation 'com.google.mlkit:common:18.7.0'
    implementation 'com.google.mlkit:barcode-scanning:17.1.0'
    implementation 'com.google.mlkit:vision-common:17.3.0'

    /// implementation 'com.google.mlkit:barcode-scanning:17.2.0'
    implementation 'com.google.mlkit:text-recognition:16.0.0'

    implementation 'com.google.mlkit:barcode-scanning-common:17.0.0'
    implementation 'com.google.mlkit:text-recognition:16.0.0'
    implementation 'com.google.mlkit:face-detection:16.1.5'

    implementation 'com.google.mlkit:barcode-scanning:17.2.0'
    // implementation 'com.google.mlkit:image-labeling:17.0.7'

    // Older coroutines so Tangem SDK works
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'

    // Test dependencies
    androidTestImplementation 'com.wix:detox:+'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// Exclude React Native from all configurations to avoid conflicts with local AAR
configurations.all {
    exclude group: 'com.facebook.react', module: 'react-android'
}
